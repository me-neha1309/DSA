class Solution {
public:
    vector<vector<int>>st;
    void store(vector<int>p){
        vector<int>temp;
        for(int i=0; i<p.size(); i++){
            temp.push_back(p[i]);
        }
        st.push_back(temp);
    }
    void recsubset(vector<vector<bool>>v, int i, int sum, vector<int>& p){
        if(i==0 && sum!=0 && v[0][sum]){
            p.push_back(i);
            if(i==sum){
                store(p);
            }
            return;
        }
        
        if(i==0 && sum==0){
            store(p);
            return;
        }
        
        //exclude
        if(v[i-1][sum]){
            vector<int>b = p;
            recsubset(v, i-1, sum, b);
        }
        //include 
        if(sum>=i && v[i-1][sum-i]){
            p.push_back(i);
            recsubset(v, i-1, sum-i, p);
        }
        
    }
    int integerBreak(int n) {
        if(n<=0)
            return 0;
        vector<vector<bool>>v(n+1, vector<bool>(n+1, false));
        for(int i=0; i<=n; i++)
            v[i][0]=true;
        
        for(int i=1; i<=n; i++){
            for(int j=1; j<=n; j++){
                if(i<=j){
                    v[i][j]=v[i-1][j] || v[i][j-i];
                }
            }
        }

        vector<int>p;
        recsubset(v, n, n,p);
        
        int product = 0;
        for(int i=0; i<st.size(); i++){
            int temp=1;
            for(int j=0; j<st[i].size(); j++){
                cout<<st[i][j]<<" ";
                temp = temp*st[i][j];
            } cout<<endl;
            
            product = max(product, temp);
        }
        
        return product;
    }
};